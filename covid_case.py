# -*- coding: utf-8 -*-
"""Covid case

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bMB0feNDhNO0gj6SzrZ1m2gfFlIj8DQZ
"""

import requests
import pandas as pd
from datetime import date, datetime, timedelta
from bs4 import BeautifulSoup

# Ping a website and return the HTML 
website_url = requests.get('https://en.m.wikipedia.org/wiki/COVID-19_pandemic_in_Vietnam').text
soup = BeautifulSoup(website_url,'lxml')

# Accessing HTML tags
table = soup.find('div',{'class':'barbox tright'})
rows = table.findAll('tr',{'class':'mw-collapsible mw-collapsed'})

a = []
for i in rows:
  dates = str(i.find('td',{'colspan':"2"},{'class':"bb-c"}).string)
  # dates = i.find('td',{'colspan':"2"},{'class':"bb-c"}).string.replace('⋮','2000-01-01')
  # datess = datetime.strptime(dates, '%Y-%m-%d').date()
  cases = int(i.find('span',{'class':"mcc-rm"}).string.replace(',',''))
  deaths = int(i.find('span',{'class':"mcc-rt"}).string.replace(',',''))

# Append data with full informatin on a dataframe
  if dates!="⋮":
    tmp_row = {
    "date" : dates,
    "case" : cases,
    "death" : deaths
    }
    a.append(tmp_row)
df = pd.DataFrame(a)

# Convert string date to datetime type
df["date"] = pd.to_datetime(df["date"])

# create date dataframe with full days
date_df = pd.DataFrame({"date" : pd.date_range(start=df["date"].min(), end=df["date"].max())})

#Merge 2 dataframes 
final = pd.merge(
    date_df,
    df,
    how="left",
    left_on="date",
    right_on="date",
)
# Sorted dates
final.sort_values("date")

# Fill NaN
final = final.fillna(method='ffill')
final

# Calculate percentages of case rates 
case_rates_percent = 0
case_rates_list = [0]
final["case rate"] = case_rates_percent
for current_number,previous_number in zip(final['case'],final['case'][1:]):
  case_rates_percent = round((previous_number - current_number)/current_number*100)
  case_rates_list.append(case_rates_percent)
final["case rate"] = case_rates_list

# Calculate percentages of death rates
death_rates_percent = 0
death_rates_list = [0]
final["death rate"] = death_rates_percent
for current_number_d,previous_number_d in zip(final["death"],final["death"][1:]):
  death_rates_percent = round((previous_number_d - current_number_d)/current_number_d*100)if current_number_d else 0
  death_rates_list.append(death_rates_percent)
final["death rate"] = death_rates_list

final.info()

import calendar
week = []
month = []
for n in final['date']:
  week.append(n.strftime('%A'))
  month.append(n.strftime('%m'))
final["week"] = week
final["month"] = month
days = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday']
# index theo thứ tự tuần
week_df = final.groupby('week').sum().reindex(days)
print(week_df)
months = ['01','02','03','04','05','06','07','08','09','10','11','12']
month_df = final.groupby('month').sum().reindex(months)
print(month_df)

y =["case rate", "death rate"] 
week_df.plot(y=y)
month_df.plot(y=y)